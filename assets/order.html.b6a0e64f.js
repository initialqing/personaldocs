import{_ as e,r as o,o as c,c as l,a as n,e as a,w as t,b as p,d as u}from"./app.71cb111c.js";const i={},r={class:"table-of-contents"},k=u(`<p>\u6BCF\u4E00\u6B21\u9012\u5F52\u90FD\u4F1A\u628A\u51FD\u6570\u7684\u5C40\u90E8\u53D8\u91CF\u5165\u6808\uFF0C\u7B49\u9012\u5F52\u51FD\u6570\u8FD4\u56DE\u5728\u628A\u51FD\u6570\u7684\u5404\u4E2A\u53C2\u6570\u5F39\u51FA\uFF0C\u7528\u6808\u53EF\u4EE5\u5B9E\u73B0\u4E8C\u53C9\u6811\u7684\u8FED\u4EE3\u904D\u5386</p><h2 id="\u8FED\u4EE3\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#\u8FED\u4EE3\u904D\u5386" aria-hidden="true">#</a> \u8FED\u4EE3\u904D\u5386</h2><h3 id="\u524D\u5E8F\u904D\u5386-\u8FED\u4EE3" tabindex="-1"><a class="header-anchor" href="#\u524D\u5E8F\u904D\u5386-\u8FED\u4EE3" aria-hidden="true">#</a> \u524D\u5E8F\u904D\u5386\uFF08\u8FED\u4EE3\uFF09</h3><p>\u524D\u5E8F\u904D\u5386\u7684\u987A\u5E8F\u662F\u4E2D\u5DE6\u53F3\uFF0C\u6BCF\u6B21\u5148\u5904\u7406\u4E2D\u95F4\u8282\u70B9\uFF0C\u518D\u5C06\u53F3\u8282\u70B9\u3001\u5DE6\u8282\u70B9\u5165\u6808\uFF0C\u8FD9\u6837\u5904\u7406\u7684\u8BDD\u5728\u6808\u5F39\u51FA\u7684\u65F6\u5019\u5C31\u662F\u4E2D\u5DE6\u53F3\u7684\u987A\u5E8F\u3002</p><ol><li>\u5C06\u5143\u7D20\u653E\u5982result\u6570\u7EC4</li><li>\u5904\u7406\u8282\u70B9\u5165\u6808</li></ol><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">preOrderTraversal</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode<span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> stack<span class="token operator">:</span>TreeNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">const</span> res<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>  <span class="token comment">// \u5904\u7406\u8282\u70B9 \u4E2D</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token comment">//  \u53F3</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>   <span class="token comment">//  \u5DE6</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E2D\u5E8F\u904D\u5386-\u8FED\u4EE3" tabindex="-1"><a class="header-anchor" href="#\u4E2D\u5E8F\u904D\u5386-\u8FED\u4EE3" aria-hidden="true">#</a> \u4E2D\u5E8F\u904D\u5386\uFF08\u8FED\u4EE3\uFF09</h3><p>\u4E2D\u7EED\u904D\u5386\uFF1A\u5148\u5C06\u5C06\u6240\u6709\u8282\u70B9\u7684\u5DE6\u8FB9\u8282\u70B9\u5165\u6808\uFF0C\u7136\u540E\u4E00\u8FB9\u51FA\u6808\uFF0C\u4E00\u8FB9\u5904\u7406\u53F3\u8FB9\u8282\u70B9\u3002</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">midOrderTraversal</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode<span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> stack<span class="token operator">:</span> TreeNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">const</span> res<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> cur <span class="token operator">=</span> root
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">||</span> stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u8BBF\u95EE\u8282\u70B9\uFF0C\u4E00\u76F4\u8BBF\u95EE\u5230\u6700\u6700\u5DE6\u8FB9\u7684\u8282\u70B9\u3002</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token comment">// \u628A\u9700\u8981\u8BBF\u95EE\u8282\u70B9\u5165\u6808</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left <span class="token comment">// \u5411\u5DE6\u5165\u6808 </span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token comment">// \u4E2D \u5904\u7406\u8282\u70B9</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right <span class="token comment">// \u53F3\u8FB9\u8282\u70B9\u5165\u6808</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u540E\u7EED\u904D\u5386-\u8FED\u4EE3" tabindex="-1"><a class="header-anchor" href="#\u540E\u7EED\u904D\u5386-\u8FED\u4EE3" aria-hidden="true">#</a> \u540E\u7EED\u904D\u5386\uFF08\u8FED\u4EE3\uFF09</h3><p>\u540E\u5E8F\u904D\u5386\uFF1A\u8FD9\u79CD\u60C5\u51B5\u8DDF\u524D\u5E8F\u904D\u5386\u6B63\u597D\u5B8C\u5168\u76F8\u53CD\u3002</p><p><img src="https://example.qingcc.top/image-20220923200346376.png" alt="image-20220923200346376"></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">postOrderTraversal</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode<span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> stack<span class="token operator">:</span> TreeNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">const</span> res<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u9012\u5F52\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#\u9012\u5F52\u904D\u5386" aria-hidden="true">#</a> \u9012\u5F52\u904D\u5386</h2><h3 id="\u524D\u5E8F\u904D\u5386-\u9012\u5F52" tabindex="-1"><a class="header-anchor" href="#\u524D\u5E8F\u904D\u5386-\u9012\u5F52" aria-hidden="true">#</a> \u524D\u5E8F\u904D\u5386\uFF08\u9012\u5F52\uFF09</h3><blockquote><p>\u4E2D\u5DE6\u53F3</p></blockquote><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">function</span> <span class="token function">preOrderTraversal</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode<span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span>
    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
    <span class="token function">preOrderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
    <span class="token function">preOrderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E2D\u5E8F\u904D\u5386-\u9012\u5F52" tabindex="-1"><a class="header-anchor" href="#\u4E2D\u5E8F\u904D\u5386-\u9012\u5F52" aria-hidden="true">#</a> \u4E2D\u5E8F\u904D\u5386\uFF08\u9012\u5F52\uFF09</h3><blockquote><p>\u5DE6\u4E2D\u53F3</p></blockquote><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">function</span> <span class="token function">midOrderTraversal</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode<span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span>
    <span class="token function">midOrderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
    <span class="token function">midOrderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u540E\u5E8F\u904D\u5386-\u9012\u5F52" tabindex="-1"><a class="header-anchor" href="#\u540E\u5E8F\u904D\u5386-\u9012\u5F52" aria-hidden="true">#</a> \u540E\u5E8F\u904D\u5386\uFF08\u9012\u5F52\uFF09</h3><blockquote><p>\u5DE6\u53F3\u4E2D</p></blockquote><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">function</span> <span class="token function">postOrderTraversal</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode<span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span>
    <span class="token function">postOrderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
    <span class="token function">postOrderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23);function d(v,m){const s=o("router-link");return c(),l("div",null,[n("nav",r,[n("ul",null,[n("li",null,[a(s,{to:"#\u8FED\u4EE3\u904D\u5386"},{default:t(()=>[p("\u8FED\u4EE3\u904D\u5386")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#\u524D\u5E8F\u904D\u5386-\u8FED\u4EE3"},{default:t(()=>[p("\u524D\u5E8F\u904D\u5386\uFF08\u8FED\u4EE3\uFF09")]),_:1})]),n("li",null,[a(s,{to:"#\u4E2D\u5E8F\u904D\u5386-\u8FED\u4EE3"},{default:t(()=>[p("\u4E2D\u5E8F\u904D\u5386\uFF08\u8FED\u4EE3\uFF09")]),_:1})]),n("li",null,[a(s,{to:"#\u540E\u7EED\u904D\u5386-\u8FED\u4EE3"},{default:t(()=>[p("\u540E\u7EED\u904D\u5386\uFF08\u8FED\u4EE3\uFF09")]),_:1})])])]),n("li",null,[a(s,{to:"#\u9012\u5F52\u904D\u5386"},{default:t(()=>[p("\u9012\u5F52\u904D\u5386")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#\u524D\u5E8F\u904D\u5386-\u9012\u5F52"},{default:t(()=>[p("\u524D\u5E8F\u904D\u5386\uFF08\u9012\u5F52\uFF09")]),_:1})]),n("li",null,[a(s,{to:"#\u4E2D\u5E8F\u904D\u5386-\u9012\u5F52"},{default:t(()=>[p("\u4E2D\u5E8F\u904D\u5386\uFF08\u9012\u5F52\uFF09")]),_:1})]),n("li",null,[a(s,{to:"#\u540E\u5E8F\u904D\u5386-\u9012\u5F52"},{default:t(()=>[p("\u540E\u5E8F\u904D\u5386\uFF08\u9012\u5F52\uFF09")]),_:1})])])])])]),k])}const h=e(i,[["render",d],["__file","order.html.vue"]]);export{h as default};
