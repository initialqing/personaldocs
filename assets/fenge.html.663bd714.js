import{_ as n,o as s,c as a,d as t}from"./app.71cb111c.js";const p={},o=t(`<h1 id="\u5206\u5272" tabindex="-1"><a class="header-anchor" href="#\u5206\u5272" aria-hidden="true">#</a> \u5206\u5272</h1><h2 id="_131-\u5206\u5272\u56DE\u6587\u4E32" tabindex="-1"><a class="header-anchor" href="#_131-\u5206\u5272\u56DE\u6587\u4E32" aria-hidden="true">#</a> 131.\u5206\u5272\u56DE\u6587\u4E32</h2><h3 id="\u9898\u76EE\u63CF\u8FF0" tabindex="-1"><a class="header-anchor" href="#\u9898\u76EE\u63CF\u8FF0" aria-hidden="true">#</a> \u9898\u76EE\u63CF\u8FF0</h3><p>\u7ED9\u4F60\u4E00\u4E2A\u5B57\u7B26\u4E32 <code>s</code>\uFF0C\u8BF7\u4F60\u5C06 <code>s</code> \u5206\u5272\u6210\u4E00\u4E9B\u5B50\u4E32\uFF0C\u4F7F\u6BCF\u4E2A\u5B50\u4E32\u90FD\u662F <strong>\u56DE\u6587\u4E32</strong> \u3002\u8FD4\u56DE <code>s</code> \u6240\u6709\u53EF\u80FD\u7684\u5206\u5272\u65B9\u6848\u3002</p><p><strong>\u56DE\u6587\u4E32</strong> \u662F\u6B63\u7740\u8BFB\u548C\u53CD\u7740\u8BFB\u90FD\u4E00\u6837\u7684\u5B57\u7B26\u4E32\u3002</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>\u8F93\u5165\uFF1As = &quot;aab&quot;</p><p>\u8F93\u51FA\uFF1A[[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;],[&quot;aa&quot;,&quot;b&quot;]]</p><p>\u8F93\u5165\uFF1As = &quot;a&quot;</p><p>\u8F93\u51FA\uFF1A[[&quot;a&quot;]]</p></div><h3 id="\u601D\u8DEF" tabindex="-1"><a class="header-anchor" href="#\u601D\u8DEF" aria-hidden="true">#</a> \u601D\u8DEF</h3><p>\u6536\u96C6\u7ED3\u679C\u7684\u6761\u4EF6\uFF1AstartIdnex\u7D22\u5F15\u4E5F\u5C31\u662F\u5206\u5272\u5B57\u7B26\u4E32\u7684\u8D77\u70B9\u5DF2\u7ECF\u7B49\u4E8E\u5B57\u7B26\u4E32\u7684\u957F\u5EA6</p><p>\u5199\u4E00\u4E2A\u5224\u65AD\u56DE\u6587\u4E32\u7684\u65B9\u6CD5</p><p>\u8DF3\u8FC7\u5206\u5272\u540E\u4E0D\u662F\u56DE\u6587\u5B57\u7B26\u4E32\u7684str</p><h3 id="\u4EE3\u7801\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u4EE3\u7801\u5B9E\u73B0" aria-hidden="true">#</a> \u4EE3\u7801\u5B9E\u73B0</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">partition</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">const</span> path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">function</span> <span class="token function">backTricking</span><span class="token punctuation">(</span>startIndex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u6536\u96C6\u7ED3\u679C</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>startIndex <span class="token operator">&gt;=</span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// \u5224\u65AD\u533A\u95F4\u662F\u4E0D\u662F\u56DE\u6587\u4E32</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> startIndex<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        		<span class="token comment">// \u662F\u56DE\u6587\u4E32\u6536\u96C6\u7ED3\u679C</span>
                <span class="token keyword">const</span> s <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span> i <span class="token operator">-</span> startIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
                path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// \u9012\u5F52</span>
            <span class="token function">backTricking</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span>
            path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">backTricking</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> start<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> end<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">,</span> j <span class="token operator">=</span> end<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token builtin">string</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_93-\u590D\u539Fip\u5730\u5740" tabindex="-1"><a class="header-anchor" href="#_93-\u590D\u539Fip\u5730\u5740" aria-hidden="true">#</a> 93.\u590D\u539FIP\u5730\u5740</h2><h3 id="\u9898\u76EE\u63CF\u8FF0-1" tabindex="-1"><a class="header-anchor" href="#\u9898\u76EE\u63CF\u8FF0-1" aria-hidden="true">#</a> \u9898\u76EE\u63CF\u8FF0</h3><p>\u6709\u6548 <strong>IP \u5730\u5740</strong> \u6B63\u597D\u7531\u56DB\u4E2A\u6574\u6570\uFF08\u6BCF\u4E2A\u6574\u6570\u4F4D\u4E8E 0 \u5230 255 \u4E4B\u95F4\u7EC4\u6210\uFF0C\u4E14\u4E0D\u80FD\u542B\u6709\u524D\u5BFC 0\uFF09\uFF0C\u6574\u6570\u4E4B\u95F4\u7528 &#39;.&#39; \u5206\u9694\u3002</p><p>\u4F8B\u5982\uFF1A<code>&quot;0.1.2.201&quot;</code> \u548C <code>&quot;192.168.1.1&quot;</code> \u662F \u6709\u6548 IP \u5730\u5740\uFF0C\u4F46\u662F <code>&quot;0.011.255.245&quot;</code>\u3001<code>&quot;192.168.1.312&quot;</code> \u548C <code>&quot;192.168@1.1&quot;</code> \u662F \u65E0\u6548 IP \u5730\u5740\u3002 \u7ED9\u5B9A\u4E00\u4E2A\u53EA\u5305\u542B\u6570\u5B57\u7684\u5B57\u7B26\u4E32 s \uFF0C\u7528\u4EE5\u8868\u793A\u4E00\u4E2A IP \u5730\u5740\uFF0C\u8FD4\u56DE<strong>\u6240\u6709\u53EF\u80FD\u7684\u6709\u6548 IP \u5730\u5740</strong>\uFF0C\u8FD9\u4E9B\u5730\u5740\u53EF\u4EE5\u901A\u8FC7\u5728 s \u4E2D\u63D2\u5165 &#39;.&#39; \u6765\u5F62\u6210\u3002\u4F60 \u4E0D\u80FD \u91CD\u65B0\u6392\u5E8F\u6216\u5220\u9664 s \u4E2D\u7684\u4EFB\u4F55\u6570\u5B57\u3002\u4F60\u53EF\u4EE5\u6309 <strong>\u4EFB\u4F55</strong> \u987A\u5E8F\u8FD4\u56DE\u7B54\u6848\u3002</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>\u8F93\u5165\uFF1As = &quot;25525511135&quot;</p><p>\u8F93\u51FA\uFF1A[&quot;255.255.11.135&quot;,&quot;255.255.111.35&quot;]</p></div><h3 id="\u601D\u8DEF-1" tabindex="-1"><a class="header-anchor" href="#\u601D\u8DEF-1" aria-hidden="true">#</a> \u601D\u8DEF</h3><p>\u4F7F\u7528path\u6570\u7EC4\u6536\u96C6ip\u5730\u5740\u7684\u5177\u4F53\u6570\u503C\uFF0C\u6700\u540E\u4F7F\u7528join\u65B9\u6CD5\u8FDB\u884C\u8FDE\u63A5</p><p>\u5148\u5206\u5272\u5B57\u7B26\u4E32\u5B57\u7B26\u4E32\u957F\u5EA6\u5927\u4E8E3\u6216\u8005+str &gt; 255 \u4E0D\u7B26\u5408\u8981\u6C42\u76F4\u63A5\u9000\u51FA\u5FAA\u73AF</p><p>\u9996\u4F4D0\u7684\u5F71\u54CD\uFF1A<code>str.length &gt; 1</code>\u6216\u8005<code>str[0] === &#39;0&#39;</code>\u90FD\u662F\u4E0D\u7B26\u5408\u8981\u6C42\u7684\u7ED3\u679C\u3002</p><h3 id="\u4EE3\u7801\u5B9E\u73B0-1" tabindex="-1"><a class="header-anchor" href="#\u4EE3\u7801\u5B9E\u73B0-1" aria-hidden="true">#</a> \u4EE3\u7801\u5B9E\u73B0</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">restoreIpAddresses</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">const</span> path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">function</span> <span class="token function">backTricking</span><span class="token punctuation">(</span>startIndex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>startIndex <span class="token operator">===</span> s<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u6536\u96C6\u7ED3\u679C\u5E76\u62FC\u63A5</span>
            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u9700\u8981\u6CE8\u610Fsubstr\u548Csubstirng\u7684\u533A\u522B\uFF0C\u4E00\u4E2A\u662F\u6307\u5B9A\u63D0\u53D6\u7684\u5B57\u7B26\u6570\u91CF\uFF0C\u4E00\u4E2A\u662F\u6309\u7167\u533A\u95F4\u63D0\u53D6</span>
            <span class="token keyword">const</span> str<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token comment">//\u8D8A\u754C\u4E86\uFF0C\u4E0D\u4FDD\u5B58\u7ED3\u679C</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">||</span> <span class="token operator">+</span>str<span class="token operator">&gt;</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">break</span>
            <span class="token comment">// \u9996\u4F4D0\u7684\u5F71\u54CD</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span>
            <span class="token punctuation">}</span>
            path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
            <span class="token function">backTricking</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
            path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">backTricking</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),e=[o];function c(i,u){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","fenge.html.vue"]]);export{r as default};
